ДАННЫЙ ФАЙЛ СОДЕРЖИТ ЗАМЕТКИ И ПОЯСНЕНИЯ К РАБОТЕ МЕТОДОВ В РАЗЛИЧНЫХ МОДУЛЯХ.
□ - пояснения к реализации: теоретические или вычислитеьные
▲ - замечания
△ - вопросы
☞ - вспомогательная, дополнительная информация

source_data:
    □ Чтобы получить сигнальную компоненту w = conv(bpf, delta) достаточно умножить полосовой фильтр (во временной
    области) на амплитуду дельта импульса. В связи с этим в реализацию wave я добавил простое мастабирование -
    умножение на число (amplitude).


Comparisons/current_custom_data.py:


exceptions.py:
    ☞ Информация про настраваемый вывод функции print() - https://www.geeksforgeeks.org/print-colors-python-terminal/

monitor.py:
    ☞ Информация про основные компоненты matplotlib - https://u.to/0muzHg
    ▲ Очень странный метод manage_legend(). Он нелогично устроен; это проявляется при использовании в разных режимах
    метода show(). Переписать метод для элементов класса SeisImage.

smoothing.py:
    △ Из каких соображений вибирать параметр window_width в методе smooth()?

ops.py:
    □ У меня есть несколько изображений. Я прохожусь фильтром по каждому из них и получают для каждого набор весовых
    коэфициентов. Умножаю соотвествующие трассы одного изображения на коэфициенты. И уже потом суммирую трассы с
    одинаковым номером между друг-другом.
    □ Взаимную корреляцию лучше взять средней и продублировать для каждой акф. Сами акф лучше брать какими есть, а не
    средним арифметическим двух.
    ▲ После отцентровки ВКФ можно взять среднее от левой и правой сторон, чтобы ВКФ получилась симметричной


ЗАМЕЧАНИЯ:
    1. Разобраться с визуализацией SNR. Сделать так, чтобы частота отсчетов увеличивалась пропорционально FREQUENCY.
    Сделать это после отладки ops.py, ведь влиять будет только на картинки, а не на результат.
    2. Чем меньше шум, тем больше амплитуда сигнала. Отнормировать сигнал так, чтобы максимум всегда +- совпадал с
    максимумом исходного изображения
    
КОММЕНТАРИИ:
    1. Сайт с сейсмическими данными - https://walrus.wr.usgs.gov/namss/search/
